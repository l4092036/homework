@model HomeWorkMVC.Models.ViewModels.LogonViewModel

@{
    ViewBag.Title = "Login";
}



@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>LogonViewModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Account, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Account, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Account, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Message, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Message, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Message, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/toastr.js"></script>
    <script type="text/javascript">
        $.validator.addMethod("nois", function (value, element, param) {
            if (value == false) {
                return true;
            }
            var validateState = true;
            var paramarr = param.split(',');
            $.each(paramarr, function (i, n) {
                if (value.indexOf(n) = -1) {
                    validateState = false;
                    return;
                }
            });
            return validateState;
        });
        $.validator.unobtrusive.adapters.addSingleVal("nois", "input");


        toastr.success("鐵人賽~大~~平~~台！");
    </script>
    <h2>Login</h2>

    @if (Model != null &&
    !string.IsNullOrWhiteSpace(Model.Message))
    {
        <div class="alert alert-warning">
            <script>toastr.success('@Model.Message');</script>
        </div>
    }
}
